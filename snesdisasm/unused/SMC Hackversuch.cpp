// SMC Hackversuch.cpp : Definiert den Einstiegspunkt für die Konsolenanwendung.
//http://web.archive.org/web/20071111200111/http://www.geocities.com/Qwertie256/attic/snesemu/qsnesdoc.html#RegVRAM

#include "stdafx.h"
#include <fstream>
#include <iostream>

using namespace std;

char P_REGISTER_FLAGS = 0xFF;
int  TexturZaehler = 0;
signed int i=0;//signed muss sein wegen --i;... so groß sind SMC-Dateien eh nicht...
ifstream SMCStream("TERRA.SMC", fstream::binary);
ofstream ASMStream("Terranigma - ASM.txt", ios::out);


bool M_FLAG() {
	return ((P_REGISTER_FLAGS & 0x20) == 0x20);
}

bool X_FLAG() {
	return ((P_REGISTER_FLAGS & 0x10) == 0x10);
}

void TexturDiebstahlTest() {

	char StreamPath[32];
	sprintf(StreamPath,"Texturen\%d.bmp",TexturZaehler);

	ofstream TexturStream(StreamPath, fstream::binary);

	int Data = 19778;
	TexturStream.write(Data, 2);//Fein konstant lassen... Finger weg.
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 2);
	TexturStream.write(, 2);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);
	TexturStream.write(, 4);


	++TexturZaehler;
}

int _tmain(int argc, _TCHAR* argv[])
{ 
	if (!(SMCStream.is_open())) exit(0);

	unsigned int SMCDataLength;
	// get length of file:
	SMCStream.seekg (0, ios::end);
	SMCDataLength = SMCStream.tellg();
	SMCStream.seekg (0x100);

	/*if (SMCHeader)*/ SMCDataLength=SMCDataLength-512;

	// allocate memory:
	char* SMCDataBuffer;
	SMCDataBuffer = new char [SMCDataLength];

	// read data as a block:
	SMCStream.read (SMCDataBuffer, SMCDataLength);
	SMCStream.close();

	cout << "http://wiki.superfamicom.org/snes/show/65816+Reference#fn:8" << endl;

	do {
		char TestData = SMCDataBuffer[i] & 0x0F; //Uns interessieren hauptsächlich die hinteren 4 Bits von SMCDataBuffer
		switch(SMCDataBuffer[i]) {
			case 0x00 : ASMStream << "BRK" << endl;
						break;
			case 0x01 : ASMStream << "ORA" << endl;
						break;
			case 0x02 : ASMStream << "COP" << endl;
						break;
			case 0x03 : ASMStream << "ORA" << endl;
						break;
			case 0x04 : ASMStream << "TSB" << endl;
						break;
			case 0x05 : ASMStream << "ORA" << endl;
						break;
			case 0x06 : ASMStream << "ASL" << endl;
						break;
			case 0x07 : ASMStream << "ORA" << endl;
						break;
			case 0x08 : ASMStream << "PHP" << endl;
						break;
			case 0x09 : ASMStream << "ORA" << endl;
						break;
			case 0x0A : ASMStream << "ASL" << endl;
						break;
			case 0x0B : ASMStream << "PHD" << endl;
						break;
			case 0x0C : ASMStream << "TSB" << endl;
						break;
			case 0x0D : ASMStream << "ORA" << endl;
						break;
			case 0x0E : ASMStream << "ASL" << endl;
						break;
			case 0x0F : ASMStream << "ORA" << endl;
						break;
			case 0x10 : ASMStream << "BPL" << endl;
						break;
			case 0x11 : ASMStream << "ORA" << endl;
						break;
			case 0x12 : ASMStream << "ORA" << endl;
						break;
			case 0x13 : ASMStream << "ORA" << endl;
						break;
			case 0x14 : ASMStream << "TRB" << endl;
						break;
			case 0x15 : ASMStream << "ORA" << endl;
						break;
			case 0x16 : ASMStream << "ASL" << endl;
						break;
			case 0x17 : ASMStream << "ORA" << endl;
						break;
			case 0x18 : ASMStream << "CLC" << endl;
						break;
			case 0x19 : ASMStream << "ORA" << endl;
						break;
			case 0x1A : ASMStream << "INC" << endl;
						break;
			case 0x1B : ASMStream << "TCS" << endl;
						break;
			case 0x1C : ASMStream << "TRB" << endl;
						break;
			case 0x1D : ASMStream << "ORA" << endl;
						break;
			case 0x1E : ASMStream << "ASL" << endl;
						break;
			case 0x1F : ASMStream << "ORA" << endl;
						break;
			case 0x20 : ASMStream << "JSR" << endl;
						++i;
						break;
			case 0x21 : ASMStream << "AND" << endl;
						break;
			case 0x22 : ASMStream << "JSR" << endl;
						i=i+2;
						break;
			case 0x23 : ASMStream << "AND" << endl;
						break;
			case 0x24 : ASMStream << "BIT" << endl;
						break;
			case 0x25 : ASMStream << "AND" << endl;
						break;
			case 0x26 : ASMStream << "ROL" << endl;
						break;
			case 0x27 : ASMStream << "AND" << endl;
						break;
			case 0x28 : ASMStream << "PLP" << endl;
						break;
			case 0x29 : ASMStream << "AND" << endl;
						break;
			case 0x2A : ASMStream << "ROL" << endl;
						break;
			case 0x2B : ASMStream << "PLD" << endl;
						break;
			case 0x2C : ASMStream << "BIT" << endl;
						break;
			case 0x2D : ASMStream << "AND" << endl;
						break;
			case 0x2E : ASMStream << "ROL" << endl;
						break;
			case 0x2F : ASMStream << "AND" << endl;
						break;
			case 0x30 : ASMStream << "BMI" << endl;
						break;
			case 0x31 : ASMStream << "AND" << endl;
						break;
			case 0x32 : ASMStream << "AND" << endl;
						break;
			case 0x33 : ASMStream << "AND" << endl;
						break;
			case 0x34 : ASMStream << "BIT" << endl;
						break;
			case 0x35 : ASMStream << "AND" << endl;
						break;
			case 0x36 : ASMStream << "ROL" << endl;
						break;
			case 0x37 : ASMStream << "AND" << endl;
						break;
			case 0x38 : ASMStream << "SEC" << endl;
						break;
			case 0x39 : ASMStream << "AND" << endl;
						break;
			case 0x3A : ASMStream << "DEC" << endl;
						break;
			case 0x3B : ASMStream << "TSC" << endl;
						break;
			case 0x3C : ASMStream << "BIT" << endl;
						break;	
			case 0x3D : ASMStream << "AND" << endl;
						break;	
			case 0x3E : ASMStream << "ROL" << endl;
						break;	
			case 0x3F : ASMStream << "AND" << endl;
						break;	
			case 0x40 : ASMStream << "RTI" << endl;
						--i;
						break;	
			case 0x41 : ASMStream << "EOR" << endl;
						break;	
			case 0x42 : ASMStream << "WDM (Reserviert)" << endl;
						break;		
			case 0x43 : ASMStream << "EOR" << endl;
						break;
			case 0x44 : ASMStream << "MVN" << endl;
						TexturDiebstahlTest();
						++i;
						break;	
			case 0x45 : ASMStream << "EOR" << endl;
						break;
			case 0x46 : ASMStream << "LSR" << endl;
						break;	
			case 0x47 : ASMStream << "EOR" << endl;
						break;
			case 0x48 : ASMStream << "PHA" << endl;
						break;	
			case 0x49 : ASMStream << "EOR" << endl;
						break;
			case 0x4A : ASMStream << "LSR" << endl;
						break;	
			case 0x4B : ASMStream << "PHK" << endl;
						break;
			case 0x4C : ASMStream << "JMP" << endl;
						break;	
			case 0x4D : ASMStream << "EOR" << endl;
						break;
			case 0x4E : ASMStream << "LSR" << endl;
						break;	
			case 0x4F : ASMStream << "EOR" << endl;
						break;	
			case 0x50 : ASMStream << "BVC" << endl;
						break;	
			case 0x51 : ASMStream << "EOR" << endl;
						break;	
			case 0x52 : ASMStream << "EOR" << endl;
						break;	
			case 0x53 : ASMStream << "EOR" << endl;
						break;
			case 0x54 : ASMStream << "MVN" << endl;
						TexturDiebstahlTest();
						++i;
						break;	
			case 0x55 : ASMStream << "EOR" << endl;
						break;
			case 0x56 : ASMStream << "LSR" << endl;
						break;	
			case 0x57 : ASMStream << "EOR" << endl;
						break;
			case 0x58 : ASMStream << "CLI" << endl;
						break;	
			case 0x59 : ASMStream << "EOR" << endl;
						break;
			case 0x5A : ASMStream << "PHY" << endl;
						break;	
			case 0x5B : ASMStream << "TCD" << endl;
						break;
			case 0x5C : ASMStream << "JMP" << endl;
						++i;
						break;	
			case 0x5D : ASMStream << "EOR" << endl;
						break;
			case 0x5E : ASMStream << "LSR" << endl;
						break;	
			case 0x5F : ASMStream << "EOR" << endl;
						break;	
			case 0x60 : ASMStream << "RTS" << endl;
						--i;
						break;	
			case 0x61 : ASMStream << "ADC" << endl;
						break;	
			case 0x62 : ASMStream << "PER" << endl;
						++i;
						break;	
			case 0x63 : ASMStream << "ADC" << endl;
						break;
			case 0x64 : ASMStream << "STZ" << endl;
						break;	
			case 0x65 : ASMStream << "ADC" << endl;
						break;
			case 0x66 : ASMStream << "ROR" << endl;
						break;	
			case 0x67 : ASMStream << "ADC" << endl;
						break;
			case 0x68 : ASMStream << "PLA" << endl;
						break;	
			case 0x69 : ASMStream << "ADC" << endl;
						break;
			case 0x6A : ASMStream << "ROR" << endl;
						break;	
			case 0x6B : ASMStream << "RTL" << endl;
						break;
			case 0x6C : ASMStream << "JMP" << endl;
						break;	
			case 0x6D : ASMStream << "ADC" << endl;
						break;
			case 0x6E : ASMStream << "ROR" << endl;
						break;	
			case 0x6F : ASMStream << "ADC" << endl;
						break;	
			case 0x70 : ASMStream << "BVS" << endl;
						break;	
			case 0x71 : ASMStream << "ADC" << endl;
						break;	
			case 0x72 : ASMStream << "ADC" << endl;
						break;	
			case 0x73 : ASMStream << "ADC" << endl;
						break;
			case 0x74 : ASMStream << "STZ" << endl;
						break;	
			case 0x75 : ASMStream << "ADC" << endl;
						break;
			case 0x76 : ASMStream << "ROR" << endl;
						break;	
			case 0x77 : ASMStream << "ADC" << endl;
						break;
			case 0x78 : ASMStream << "SEI" << endl;
						break;	
			case 0x79 : ASMStream << "ADC" << endl;
						break;
			case 0x7A : ASMStream << "PLY" << endl;
						break;	
			case 0x7B : ASMStream << "TDC" << endl;
						break;
			case 0x7C : ASMStream << "JMP" << endl;
						break;	
			case 0x7D : ASMStream << "ADC" << endl;
						break;
			case 0x7E : ASMStream << "ROR" << endl;
						break;	
			case 0x7F : ASMStream << "ADC" << endl;
						break;	
			case 0x80 : ASMStream << "BRA" << endl;
						break;	
			case 0x81 : ASMStream << "STA" << endl;
						break;	
			case 0x82 : ASMStream << "BRL" << endl;
						++i;
						break;	
			case 0x83 : ASMStream << "STA" << endl;
						break;
			case 0x84 : ASMStream << "STY" << endl;
						break;	
			case 0x85 : ASMStream << "STA" << endl;
						break;
			case 0x86 : ASMStream << "STX" << endl;
						break;	
			case 0x87 : ASMStream << "STA" << endl;
						break;
			case 0x88 : ASMStream << "DEY" << endl;
						break;	
			case 0x89 : ASMStream << "STA" << endl;
						break;
			case 0x8A : ASMStream << "TXA" << endl;
						break;	
			case 0x8B : ASMStream << "PHB" << endl;
						break;
			case 0x8C : ASMStream << "STY" << endl;
						break;	
			case 0x8D : ASMStream << "STA" << endl;
						break;
			case 0x8E : ASMStream << "STX" << endl;
						break;	
			case 0x8F : ASMStream << "STA" << endl;
						break;	
			case 0x90 : ASMStream << "BCC" << endl;
						break;	
			case 0x91 : ASMStream << "STA" << endl;
						break;	
			case 0x92 : ASMStream << "STA" << endl;
						break;	
			case 0x93 : ASMStream << "STA" << endl;
						break;
			case 0x94 : ASMStream << "STY" << endl;
						break;	
			case 0x95 : ASMStream << "STA" << endl;
						break;
			case 0x96 : ASMStream << "STX" << endl;
						break;	
			case 0x97 : ASMStream << "STA" << endl;
						break;
			case 0x98 : ASMStream << "TYA" << endl;
						break;	
			case 0x99 : ASMStream << "STA" << endl;
						break;
			case 0x9A : ASMStream << "TXS" << endl;
						break;	
			case 0x9B : ASMStream << "TXY" << endl;
						break;
			case 0x9C : ASMStream << "STZ" << endl;
						break;	
			case 0x9D : ASMStream << "STA" << endl;
						break;
			case 0x9E : ASMStream << "STZ" << endl;
						break;	
			case 0x9F : ASMStream << "STA" << endl;
						break;	
			case 0xA0 : ASMStream << "LDY" << endl;
						break;	
			case 0xA1 : ASMStream << "LDA" << endl;
						break;	
			case 0xA2 : ASMStream << "LDX" << endl;
						break;	
			case 0xA3 : ASMStream << "LDA" << endl;
						break;
			case 0xA4 : ASMStream << "LDY" << endl;
						break;	
			case 0xA5 : ASMStream << "LDA" << endl;
						break;
			case 0xA6 : ASMStream << "LDX" << endl;
						break;	
			case 0xA7 : ASMStream << "LDA" << endl;
						break;
			case 0xA8 : ASMStream << "TAY" << endl;
						break;	
			case 0xA9 : ASMStream << "LDA" << endl;
						break;
			case 0xAA : ASMStream << "TAX" << endl;
						break;	
			case 0xAB : ASMStream << "PLB" << endl;
						break;
			case 0xAC : ASMStream << "LDY" << endl;
						break;	
			case 0xAD : ASMStream << "LDA" << endl;
						break;
			case 0xAE : ASMStream << "LDX" << endl;
						break;	
			case 0xAF : ASMStream << "LDA" << endl;
						break;	
			case 0xB0 : ASMStream << "BCS" << endl;
						break;	
			case 0xB1 : ASMStream << "LDA" << endl;
						break;	
			case 0xB2 : ASMStream << "LDA" << endl;
						break;	
			case 0xB3 : ASMStream << "LDA" << endl;
						break;
			case 0xB4 : ASMStream << "LDY" << endl;
						break;	
			case 0xB5 : ASMStream << "LDA" << endl;
						break;
			case 0xB6 : ASMStream << "LDX" << endl;
						break;	
			case 0xB7 : ASMStream << "LDA" << endl;
						break;
			case 0xB8 : ASMStream << "CLV" << endl;
						break;	
			case 0xB9 : ASMStream << "LDA" << endl;
						break;
			case 0xBA : ASMStream << "TSX" << endl;
						break;	
			case 0xBB : ASMStream << "TYX" << endl;
						break;
			case 0xBC : ASMStream << "LDY" << endl;
						break;	
			case 0xBD : ASMStream << "LDA" << endl;
						break;
			case 0xBE : ASMStream << "LDX" << endl;
						break;	
			case 0xBF : ASMStream << "LDA" << endl;
						break;	
			case 0xC0 : ASMStream << "CPY" << endl;
						break;	
			case 0xC1 : ASMStream << "CMP" << endl;
						break;	
			case 0xC2 : ASMStream << "REP" << endl;
						break;	
			case 0xC3 : ASMStream << "CMP" << endl;
						break;
			case 0xC4 : ASMStream << "CPY" << endl;
						break;	
			case 0xC5 : ASMStream << "CMP" << endl;
						break;
			case 0xC6 : ASMStream << "DEC" << endl;
						break;	
			case 0xC7 : ASMStream << "CMP" << endl;
						break;
			case 0xC8 : ASMStream << "INY" << endl;
						break;	
			case 0xC9 : ASMStream << "CMP" << endl;
						break;
			case 0xCA : ASMStream << "DEX" << endl;
						break;	
			case 0xCB : ASMStream << "WAI" << endl;
						break;
			case 0xCC : ASMStream << "CPY" << endl;
						break;	
			case 0xCD : ASMStream << "CMP" << endl;
						break;
			case 0xCE : ASMStream << "DEC" << endl;
						break;	
			case 0xCF : ASMStream << "CMP" << endl;
						break;	
			case 0xD0 : ASMStream << "BNE" << endl;
						break;	
			case 0xD1 : ASMStream << "CMP" << endl;
						break;	
			case 0xD2 : ASMStream << "CMP" << endl;
						break;	
			case 0xD3 : ASMStream << "CMP" << endl;
						break;
			case 0xD4 : ASMStream << "PEI" << endl;
						break;	
			case 0xD5 : ASMStream << "CMP" << endl;
						break;
			case 0xD6 : ASMStream << "DEC" << endl;
						break;	
			case 0xD7 : ASMStream << "CMP" << endl;
						break;
			case 0xD8 : ASMStream << "CLD" << endl;
						break;	
			case 0xD9 : ASMStream << "CMP" << endl;
						break;
			case 0xDA : ASMStream << "PHX" << endl;
						break;	
			case 0xDB : ASMStream << "STP" << endl;
						break;
			case 0xDC : ASMStream << "JMP" << endl;
						break;	
			case 0xDD : ASMStream << "CMP" << endl;
						break;
			case 0xDE : ASMStream << "DEC" << endl;
						break;	
			case 0xDF : ASMStream << "CMP" << endl;
						break;	
			case 0xE0 : ASMStream << "CPX" << endl;
						break;	
			case 0xE1 : ASMStream << "SBC" << endl;
						break;	
			case 0xE2 : ASMStream << "SEP" << endl;
						break;	
			case 0xE3 : ASMStream << "SBC" << endl;
						break;
			case 0xE4 : ASMStream << "CPX" << endl;
						break;	
			case 0xE5 : ASMStream << "SBC" << endl;
						break;
			case 0xE6 : ASMStream << "INC" << endl;
						break;	
			case 0xE7 : ASMStream << "SBC" << endl;
						break;
			case 0xE8 : ASMStream << "INX" << endl;
						break;	
			case 0xE9 : ASMStream << "SBC" << endl;
						break;
			case 0xEA : ASMStream << "NOP" << endl;
						break;	
			case 0xEB : ASMStream << "XBA" << endl;
						break;
			case 0xEC : ASMStream << "CPX" << endl;
						break;	
			case 0xED : ASMStream << "SBC" << endl;
						break;
			case 0xEE : ASMStream << "INC" << endl;
						break;	
			case 0xEF : ASMStream << "SBC" << endl;
						break;	
			case 0xF0 : ASMStream << "BEQ" << endl;
						break;	
			case 0xF1 : ASMStream << "SBC" << endl;
						break;	
			case 0xF2 : ASMStream << "SBC" << endl;
						break;	
			case 0xF3 : ASMStream << "SBC" << endl;
						break;
			case 0xF4 : ASMStream << "PEA" << endl;
						++i;
						break;	
			case 0xF5 : ASMStream << "SBC" << endl;
						break;
			case 0xF6 : ASMStream << "INC" << endl;
						break;	
			case 0xF7 : ASMStream << "SBC" << endl;
						break;
			case 0xF8 : ASMStream << "SED" << endl;
						break;	
			case 0xF9 : ASMStream << "SBC" << endl;
						break;
			case 0xFA : ASMStream << "PLX" << endl;
						break;	
			case 0xFB : ASMStream << "XCE" << endl;
						break;
			case 0xFC : ASMStream << "JSR" << endl;
						break;	
			case 0xFD : ASMStream << "SBC" << endl;
						break;
			case 0xFE : ASMStream << "INC" << endl;
						break;	
			case 0xFF : ASMStream << "SBC" << endl;
						break;	
		} //End-Switch

		int x = i;
		//Ausnahmewerte(Hex): 20, 40, 60, E0, 22, 62, 82, 44, 54, F4, 5C
		if  (TestData ==    0){if (SMCDataBuffer[i]==0xE0 && !X_FLAG()) i=i+3; else i=i+2; } else
		if ((TestData == 0x08) || (TestData == 0x0A) || (TestData == 0x0B)) ++i; else
		if ((TestData == 0x01) || (TestData == 0x02) || (TestData == 0x03) || (TestData == 0x04) || (TestData == 0x05) || (TestData == 0x06) || (TestData == 0x07)) i=i+2; else 
		if  (TestData == 0x09) {if(TestData == 0x10) i=i+3; else {if ((SMCDataBuffer[i]==0x69) && !M_FLAG()) i=i+3; else i=i+2;}} else
		if ((TestData == 0x0C) || (TestData == 0x0D) || (TestData == 0x0E)) i=i+3; else
		if ((TestData == 0x0F)) i=i+4; else {
			cout<<"FEHLER, i konnte nicht inkrementiert werden."<<endl;
			goto SchleifeVerlassen;
		}
		if (x==i) {
			cout << "i=" << i<< endl;
			cout << "SMCDataBuffer["<<i<<"]="<<SMCDataBuffer[i]<<endl;
			goto SchleifeVerlassen;
		}
		
	} while (i<SMCDataLength);

SchleifeVerlassen:

	delete[] SMCDataBuffer;
	SMCStream.close();
	ASMStream.close();
	cout << "TERRA.SMC wurde fertig Disassembled." << endl;
	int Irgendwas;
	cin >> Irgendwas;

	return 0;
}

